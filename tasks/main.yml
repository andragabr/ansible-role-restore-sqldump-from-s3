---
# tasks file for restore-sqldump-from-s3

- include: s3cmd.yml

- name: Copy across GPG secret key
  copy: content="{{gpg_secret_key}}" dest=~/sec-gpg.asc

- name: Import GPG secret key into keyring
  command: gpg --allow-secret-key-import --import ~/sec-gpg.asc 
  # Ensure our command is idempotent, e.g. don't fail or show as changed when the key is already in the secret keyring
  register: gpg_result
  failed_when: "'Invalid keyring' in gpg_result.stderr"
  changed_when: "'secret keys imported' in gpg_result.stderr"

- name: Make folder to store backups
  file: path=~/sql-dumps state=directory

- name: Download S3 backups
  command: s3cmd sync {{s3_backup_url}}/ ~/sql-dumps/
  args:
    creates: ~/sql-dumps/wordpress.sql.gz.gpg
  register: s3cmd
- debug: var=s3cmd.stdout_lines

- name: Enumerate databases from backup files
  shell: find ~/sql-dumps -maxdepth 1 ! -name 'mysql.sql.gz.gpg' -name '*.sql.gz.gpg' -printf "%f\n" | sed s/.sql.gz.gpg$//
  register: database_list
  changed_when: False
  tags: dbimport    
 
- name: Create databases in MySQL
  mysql_db: name={{ item }} state=present
  with_items: "{{database_list.stdout_lines}}"
  tags: dbimport

- name: Decrypt and decompress SQL dumps
  shell: gpg --decrypt ~/sql-dumps/{{ item }}.sql.gz.gpg | gunzip > ~/sql-dumps/{{ item }}.sql
  args:
    creates: ~/sql-dumps/{{ item }}.sql
  with_items: "{{database_list.stdout_lines}}"
  tags: dbimport

- name: Check which databases have already been imported
  stat: path=~/sql-dumps/{{ item }}.imported
  register: database_list_import_status
  with_items: "{{database_list.stdout_lines}}"
  tags: dbimport

- name: Import SQL dumps into MySQL
  shell: mysql -D {{ item.0 }} < ~/sql-dumps/{{ item.0 }}.sql && touch ~/sql-dumps/{{ item.0 }}.imported 
  with_together:
    - "{{database_list.stdout_lines}}"
    - "{{database_list_import_status.results|map(attribute='stat.exists')|map('default','')|list}}"
  when: not item.1
  tags: dbimport
